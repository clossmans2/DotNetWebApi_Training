// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace ContosoUniversity.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240327154648_DbCreation")]
    partial class DbCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CourseId");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ba22eae4-8282-483d-8d43-e3b47bd105d4"),
                            Credits = 3,
                            DepartmentId = new Guid("ce1815fb-6730-4b7a-9e3c-322db0c98414"),
                            Title = "Chemistry"
                        },
                        new
                        {
                            Id = new Guid("854f1892-e043-49e0-9573-5544e833a8d3"),
                            Credits = 3,
                            DepartmentId = new Guid("00c4512a-6c05-482b-9026-3f413f477132"),
                            Title = "Microeconomics"
                        },
                        new
                        {
                            Id = new Guid("ad18dff5-58ee-4e02-ba83-ffd1c8a1f56e"),
                            Credits = 3,
                            DepartmentId = new Guid("00c4512a-6c05-482b-9026-3f413f477132"),
                            Title = "Macroeconomics"
                        },
                        new
                        {
                            Id = new Guid("db564e68-2fe5-42e5-ba48-b2b49034d3d2"),
                            Credits = 4,
                            DepartmentId = new Guid("c8eee19f-7040-492f-81c8-62cbe50d8467"),
                            Title = "Calculus"
                        },
                        new
                        {
                            Id = new Guid("83af998c-0bfd-4855-8c5a-4e1920b9d025"),
                            Credits = 4,
                            DepartmentId = new Guid("c8eee19f-7040-492f-81c8-62cbe50d8467"),
                            Title = "Trigonometry"
                        },
                        new
                        {
                            Id = new Guid("597800e1-0267-4ba0-81dd-a0f07aa98b20"),
                            Credits = 3,
                            DepartmentId = new Guid("c19f20e6-e77d-492d-bbc2-dce3c7603448"),
                            Title = "Composition"
                        },
                        new
                        {
                            Id = new Guid("b178e749-1f02-4461-8e5d-bb97c49eb375"),
                            Credits = 4,
                            DepartmentId = new Guid("c19f20e6-e77d-492d-bbc2-dce3c7603448"),
                            Title = "Literature"
                        });
                });

            modelBuilder.Entity("Entities.CourseAssignment", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InstructorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CourseId", "InstructorId");

                    b.HasIndex("InstructorId");

                    b.ToTable("CourseAssignments");

                    b.HasData(
                        new
                        {
                            CourseId = new Guid("ba22eae4-8282-483d-8d43-e3b47bd105d4"),
                            InstructorId = new Guid("e24a644d-9a45-4f66-966c-580fd191573a")
                        },
                        new
                        {
                            CourseId = new Guid("ba22eae4-8282-483d-8d43-e3b47bd105d4"),
                            InstructorId = new Guid("63b92923-68a5-4053-9bf7-5e41c4fe1d91")
                        },
                        new
                        {
                            CourseId = new Guid("854f1892-e043-49e0-9573-5544e833a8d3"),
                            InstructorId = new Guid("455dfcc1-552a-45fa-b94e-d973906490cc")
                        },
                        new
                        {
                            CourseId = new Guid("ad18dff5-58ee-4e02-ba83-ffd1c8a1f56e"),
                            InstructorId = new Guid("455dfcc1-552a-45fa-b94e-d973906490cc")
                        },
                        new
                        {
                            CourseId = new Guid("db564e68-2fe5-42e5-ba48-b2b49034d3d2"),
                            InstructorId = new Guid("2a12c3f2-fc7a-4bd2-9f66-21a9c79d1893")
                        },
                        new
                        {
                            CourseId = new Guid("83af998c-0bfd-4855-8c5a-4e1920b9d025"),
                            InstructorId = new Guid("63b92923-68a5-4053-9bf7-5e41c4fe1d91")
                        },
                        new
                        {
                            CourseId = new Guid("597800e1-0267-4ba0-81dd-a0f07aa98b20"),
                            InstructorId = new Guid("5b225eaa-ca3e-461d-85be-fb4608f87148")
                        },
                        new
                        {
                            CourseId = new Guid("b178e749-1f02-4461-8e5d-bb97c49eb375"),
                            InstructorId = new Guid("5b225eaa-ca3e-461d-85be-fb4608f87148")
                        });
                });

            modelBuilder.Entity("Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DepartmentId");

                    b.Property<decimal>("Budget")
                        .HasColumnType("money");

                    b.Property<Guid?>("InstructorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c19f20e6-e77d-492d-bbc2-dce3c7603448"),
                            Budget = 350000m,
                            InstructorId = new Guid("5b225eaa-ca3e-461d-85be-fb4608f87148"),
                            Name = "English",
                            StartDate = new DateTime(2007, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c8eee19f-7040-492f-81c8-62cbe50d8467"),
                            Budget = 100000m,
                            InstructorId = new Guid("2a12c3f2-fc7a-4bd2-9f66-21a9c79d1893"),
                            Name = "Mathematics",
                            StartDate = new DateTime(2007, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ce1815fb-6730-4b7a-9e3c-322db0c98414"),
                            Budget = 350000m,
                            InstructorId = new Guid("63b92923-68a5-4053-9bf7-5e41c4fe1d91"),
                            Name = "Engineering",
                            StartDate = new DateTime(2007, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("00c4512a-6c05-482b-9026-3f413f477132"),
                            Budget = 100000m,
                            InstructorId = new Guid("e24a644d-9a45-4f66-966c-580fd191573a"),
                            Name = "Economics",
                            StartDate = new DateTime(2007, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Entities.Enrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EnrollmentId");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Grade")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("32703941-2485-4dc9-bfe3-5e9a6fda5135"),
                            CourseId = new Guid("ba22eae4-8282-483d-8d43-e3b47bd105d4"),
                            Grade = 0,
                            StudentId = new Guid("06917677-cdd6-4523-91b8-88d6d0a912d2")
                        },
                        new
                        {
                            Id = new Guid("66b78962-24b1-4da8-bd0a-d7a3c9b4a87c"),
                            CourseId = new Guid("854f1892-e043-49e0-9573-5544e833a8d3"),
                            Grade = 2,
                            StudentId = new Guid("06917677-cdd6-4523-91b8-88d6d0a912d2")
                        },
                        new
                        {
                            Id = new Guid("2b3c15bb-d240-4a23-85d9-161de7df89e9"),
                            CourseId = new Guid("ad18dff5-58ee-4e02-ba83-ffd1c8a1f56e"),
                            Grade = 1,
                            StudentId = new Guid("06917677-cdd6-4523-91b8-88d6d0a912d2")
                        },
                        new
                        {
                            Id = new Guid("45805987-c6c9-4f76-adcb-375a9ab8cd3c"),
                            CourseId = new Guid("db564e68-2fe5-42e5-ba48-b2b49034d3d2"),
                            Grade = 1,
                            StudentId = new Guid("798acf1b-7339-44bd-8367-7132a978d7b1")
                        },
                        new
                        {
                            Id = new Guid("2a429451-5c56-4924-9704-96b39015714c"),
                            CourseId = new Guid("83af998c-0bfd-4855-8c5a-4e1920b9d025"),
                            Grade = 1,
                            StudentId = new Guid("798acf1b-7339-44bd-8367-7132a978d7b1")
                        },
                        new
                        {
                            Id = new Guid("62d4b9f7-0f76-48f7-af2d-fc341a83e49d"),
                            CourseId = new Guid("597800e1-0267-4ba0-81dd-a0f07aa98b20"),
                            Grade = 1,
                            StudentId = new Guid("798acf1b-7339-44bd-8367-7132a978d7b1")
                        },
                        new
                        {
                            Id = new Guid("9784bbb3-4d36-4277-b947-a57be8baf97f"),
                            CourseId = new Guid("ba22eae4-8282-483d-8d43-e3b47bd105d4"),
                            StudentId = new Guid("2a36409f-6732-459b-b7d1-a561c521a3cb")
                        },
                        new
                        {
                            Id = new Guid("80aa4d4f-c5c2-4ba3-a6e9-228b1016f0ab"),
                            CourseId = new Guid("854f1892-e043-49e0-9573-5544e833a8d3"),
                            Grade = 1,
                            StudentId = new Guid("2a36409f-6732-459b-b7d1-a561c521a3cb")
                        },
                        new
                        {
                            Id = new Guid("6fbcb84e-af63-4514-a06a-3f5cc51ef302"),
                            CourseId = new Guid("ba22eae4-8282-483d-8d43-e3b47bd105d4"),
                            Grade = 1,
                            StudentId = new Guid("7d84360e-4967-4c7b-8e4c-0f085de7ca4d")
                        },
                        new
                        {
                            Id = new Guid("2ab277ef-3910-431a-a2c2-ac191119ce85"),
                            CourseId = new Guid("597800e1-0267-4ba0-81dd-a0f07aa98b20"),
                            Grade = 1,
                            StudentId = new Guid("7a1be69a-38ac-4cde-a105-615de38c2d12")
                        },
                        new
                        {
                            Id = new Guid("b769c021-3c35-4e50-8705-8a64ce7b9d8f"),
                            CourseId = new Guid("b178e749-1f02-4461-8e5d-bb97c49eb375"),
                            Grade = 1,
                            StudentId = new Guid("5e9c10d4-3b0a-4ccb-8a77-fb2d7e702c6b")
                        });
                });

            modelBuilder.Entity("Entities.Instructor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstMidName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("FirstName");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Instructors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5b225eaa-ca3e-461d-85be-fb4608f87148"),
                            Email = "kabercrombie@contosouniversity.edu",
                            FirstMidName = "Kim",
                            HireDate = new DateTime(1995, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Abercrombie"
                        },
                        new
                        {
                            Id = new Guid("2a12c3f2-fc7a-4bd2-9f66-21a9c79d1893"),
                            Email = "ffakhouri@contosouniveristy.edu",
                            FirstMidName = "Fadi",
                            HireDate = new DateTime(2002, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Fakhouri"
                        },
                        new
                        {
                            Id = new Guid("63b92923-68a5-4053-9bf7-5e41c4fe1d91"),
                            Email = "rharui@contosouniversity.edu",
                            FirstMidName = "Roger",
                            HireDate = new DateTime(1998, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Harui"
                        },
                        new
                        {
                            Id = new Guid("e24a644d-9a45-4f66-966c-580fd191573a"),
                            Email = "ckapoor@contosouniversity.edu",
                            FirstMidName = "Candace",
                            HireDate = new DateTime(2001, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Kapoor"
                        },
                        new
                        {
                            Id = new Guid("455dfcc1-552a-45fa-b94e-d973906490cc"),
                            Email = "rzheng@contosouniversity.edu",
                            FirstMidName = "Roger",
                            HireDate = new DateTime(2004, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Zheng"
                        });
                });

            modelBuilder.Entity("Entities.OfficeAssignment", b =>
                {
                    b.Property<Guid>("InstructorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("InstructorId");

                    b.ToTable("OfficeAssignments");

                    b.HasData(
                        new
                        {
                            InstructorId = new Guid("2a12c3f2-fc7a-4bd2-9f66-21a9c79d1893"),
                            Location = "Smith 17"
                        },
                        new
                        {
                            InstructorId = new Guid("63b92923-68a5-4053-9bf7-5e41c4fe1d91"),
                            Location = "Gowan 27"
                        },
                        new
                        {
                            InstructorId = new Guid("e24a644d-9a45-4f66-966c-580fd191573a"),
                            Location = "Thompson 304"
                        });
                });

            modelBuilder.Entity("Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstMidName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("06917677-cdd6-4523-91b8-88d6d0a912d2"),
                            Email = "calexander@contosouniversity.edu",
                            EnrollmentDate = new DateTime(2010, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstMidName = "Carson",
                            LastName = "Alexander"
                        },
                        new
                        {
                            Id = new Guid("798acf1b-7339-44bd-8367-7132a978d7b1"),
                            Email = "malonso@contosouniversity.edu",
                            EnrollmentDate = new DateTime(2012, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstMidName = "Meredith",
                            LastName = "Alonso"
                        },
                        new
                        {
                            Id = new Guid("2a36409f-6732-459b-b7d1-a561c521a3cb"),
                            Email = "aanand@contosouniversity.edu",
                            EnrollmentDate = new DateTime(2013, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstMidName = "Arturo",
                            LastName = "Anand"
                        },
                        new
                        {
                            Id = new Guid("7d84360e-4967-4c7b-8e4c-0f085de7ca4d"),
                            Email = "gbarzdukas@contosouniversity.edu",
                            EnrollmentDate = new DateTime(2012, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstMidName = "Gytis",
                            LastName = "Barzdukas"
                        },
                        new
                        {
                            Id = new Guid("7a1be69a-38ac-4cde-a105-615de38c2d12"),
                            Email = "yli@contosouniversity.edu",
                            EnrollmentDate = new DateTime(2012, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstMidName = "Yan",
                            LastName = "Li"
                        },
                        new
                        {
                            Id = new Guid("5e9c10d4-3b0a-4ccb-8a77-fb2d7e702c6b"),
                            Email = "pjustice@contosouniversity.edu",
                            EnrollmentDate = new DateTime(2011, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstMidName = "Peggy",
                            LastName = "Justice"
                        },
                        new
                        {
                            Id = new Guid("53cea385-aa61-4e81-ba7a-38d7ed60ce4f"),
                            Email = "lnorman@contosouniversity.edu",
                            EnrollmentDate = new DateTime(2013, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstMidName = "Laura",
                            LastName = "Norman"
                        },
                        new
                        {
                            Id = new Guid("554039c7-cba1-4404-9fbe-21918a9190f7"),
                            Email = "nolivetto@contosouniversity.edu",
                            EnrollmentDate = new DateTime(2005, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstMidName = "Nino",
                            LastName = "Olivetto"
                        });
                });

            modelBuilder.Entity("Entities.Course", b =>
                {
                    b.HasOne("Entities.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Entities.CourseAssignment", b =>
                {
                    b.HasOne("Entities.Course", "Course")
                        .WithMany("CourseAssignments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Instructor", "Instructor")
                        .WithMany("CourseAssignments")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Entities.Department", b =>
                {
                    b.HasOne("Entities.Instructor", "Administrator")
                        .WithMany()
                        .HasForeignKey("InstructorId");

                    b.Navigation("Administrator");
                });

            modelBuilder.Entity("Entities.Enrollment", b =>
                {
                    b.HasOne("Entities.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Entities.OfficeAssignment", b =>
                {
                    b.HasOne("Entities.Instructor", "Instructor")
                        .WithOne("OfficeAssignment")
                        .HasForeignKey("Entities.OfficeAssignment", "InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Entities.Course", b =>
                {
                    b.Navigation("CourseAssignments");

                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("Entities.Department", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Entities.Instructor", b =>
                {
                    b.Navigation("CourseAssignments");

                    b.Navigation("OfficeAssignment");
                });

            modelBuilder.Entity("Entities.Student", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
